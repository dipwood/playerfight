var type = module.exports,

    toString = Object.prototype.toString,
    fnToString = Function.prototype.toString,

    reHostCtor = /^\[object .+?Constructor\]$/,

    reNative = RegExp("^" +
        fnToString.call(toString)
        .replace(/[.*+?^${}()|[\]\/\\]/g, "\\$&")
        .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    ),

    isHostObject;


type.isObject = function(obj) {
    var typeStr;

    return obj != null && ((typeStr = typeof(obj)) === "object" || typeStr === "function");
};

type.isHash = function(obj) {

    return toString.call(obj) === "[object Object]";
};

type.isArrayLike = function(obj) {

    return obj != null && !type.isWindow(obj) && (obj.length === +obj.length);
};

type.isArray = Array.isArray || function isArray(obj) {

    return toString.call(obj) === "[object Array]";
};

type.isArguments = function(obj) {

    return toString.call(obj) === "[object Arguments]";
};

if (typeof(/./) !== "function") {
    type.isFunction = function(obj) {

        return typeof(obj) === "function";
    };
} else {
    type.isFunction = function(obj) {

        return toString.call(obj) === "[object Function]";
    };
}

type.isString = function(obj) {

    return typeof(obj) === "string";
};

type.isNumber = function(obj) {

    return typeof(obj) === "number";
};

type.isFinite = Number.isFinite || function isFinite(obj) {
    return !(
        typeof(obj) !== "number" ||
        (obj !== obj || obj === Infinity || obj === -Infinity) ||
        false
    );
};

type.isNaN = Number.isNaN || function(obj) {

    return type.isNumber(obj) && (obj !== obj);
};

type.isDecimal = function(obj) {

    return type.isNumber(obj) && obj % 1 !== 0;
};

type.isFloat = type.isDecimal;

type.isInteger = function(obj) {

    return type.isNumber(obj) && obj % 1 === 0;
};

type.isInt = type.isInteger;

type.isDate = function(obj) {

    return toString.call(obj) === "[object Date]";
};

type.isRegExp = function(obj) {

    return toString.call(obj) === "[object RegExp]";
};

type.isBoolean = function(obj) {

    return obj === true || obj === false;
};

type.isNull = function(obj) {

    return obj === null;
};

type.isUndefined = function(obj) {

    return obj === undefined;
};

type.isUndefinedOrNull = function(obj) {

    return obj == null;
};

type.isDefined = function(obj) {

    return obj != null;
};

type.isPrimitive = function(obj) {
    var typeStr;
    return obj == null || ((typeStr = typeof(obj)) !== "object" && typeStr !== "function");
};

type.isError = function(obj) {

    return toString.call(obj) === "[object Error]";
};

isHostObject = (function() {
    try {
        String({
            "toString": 0
        } + "");
    } catch (e) {
        return function isHostObject() {
            return false;
        };
    }

    return function isHostObject(value) {
        return !type.isFunction(value.toString) && typeof(value + "") === "string";
    };
}());

type.isNative = function(obj) {
    return obj != null && (
        type.isFunction(obj) ?
        reNative.test(fnToString.call(obj)) : (
            typeof(obj) === "object" && (
                (isHostObject(obj) ? reNative : reHostCtor).test(obj) || false
            )
        )
    );
};

type.isNode = function(obj) {
    return obj != null && (
        type.isFunction(Node) ? obj instanceof Node : (
            typeof(obj) === "object" &&
            typeof(obj.nodeType) === "number" &&
            typeof(obj.nodeName) === "string"
        )
    );
};

type.isTextNode = function(obj) {

    return type.isNode(obj) && obj.nodeType === 3;
};

type.isTextInputElement = (function() {
    var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };

    return function isTextInputElement(obj) {
        return obj != null && (
            (obj.nodeName === "INPUT" && supportedInputTypes[obj.type]) ||
            obj.nodeName === "TEXTAREA"
        );
    };
}());

type.isElement = function(obj) {
    return obj != null && (
        type.isFunction(HTMLElement) ? obj instanceof HTMLElement : (
            typeof(obj) === "object" &&
            obj.nodeType === 1 &&
            typeof(obj.nodeName) === "string"
        )
    );
};

type.isEventTarget = function(obj) {
    return obj != null && (
        type.isFunction(EventTarget) ? obj instanceof EventTarget : (
            type.isFunction(obj.addEventListener) ||
            type.isFunction(obj.attachEvent)
        )
    );
};

type.isDocument = function(obj) {

    return type.isNode(obj) && obj.nodeType === 9;
};

type.isWindow = function(obj) {

    return obj != null && obj.window === obj;
};

type.isGlobal = function(obj) {

    return obj === global;
};
